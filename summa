// cities data with coordinates
const cities = {
    "Chennai": { "x": 470, "y": 510, "Bangalore": 350, "Hyderabad": 630, "Coimbatore": 500, "Salem": 340, "Tirupati": 135 },
    "Bangalore": { "x": 230, "y": 524, "Chennai": 350, "Mysore": 150, "Hyderabad": 570 },
    "Hyderabad": { "x": 350, "y": 160, "Chennai": 630, "Bangalore": 570, "Vijayawada": 270 },
    "Coimbatore": { "x": 220, "y": 660, "Chennai": 500, "Madurai": 210 },
    "Mysore": { "x": 130, "y": 520, "Bangalore": 150 },
    "Vijayawada": { "x": 530, "y": 280, "Hyderabad": 270 },
    "Madurai": { "x": 300, "y": 730, "Coimbatore": 210, "Salem": 230 },
    "Visakhapatnam": { "x": 625, "y": 238, "Tirupati": 760 },
    "Salem": { "x": 300, "y": 630, "Chennai": 340, "Madurai": 230 },
    "Tirupati": { "x": 365, "y": 460, "Chennai": 135, "Visakhapatnam": 760 }
};
function createGraph(cities, highlightedPath = []) {
    const nodes = [];
    const links = [];

    for (const city in cities) {
        nodes.push({ id: city });
        for (const neighbor in cities[city]) {
            links.push({ source: city, target: neighbor, distance: cities[city][neighbor] });
        }
    }

    // Filter the links to include only those that are part of the highlighted path
    const filteredLinks = links.filter(link =>
        highlightedPath.some(path => 
            (path.source === link.source && path.target === link.target) ||
            (path.source === link.target && path.target === link.source)
        )
    );

    const width = 1000;  // Adjusted width for the graph
    const height = 900; // Adjusted height for the graph

    const svg = d3.select("#graph")
        .append("svg")
        .attr("width", width)
        .attr("height", height);

    // Define custom positions for nodes
// cities data with coordinates
const positions= {
    "Chennai": { "x": 460, "y": 520, "Bangalore": 350, "Hyderabad": 630, "Coimbatore": 500, "Salem": 340, "Tirupati": 135 },
    "Bangalore": { "x": 230, "y": 524, "Chennai": 350, "Mysore": 150, "Hyderabad": 570 },
    "Hyderabad": { "x": 350, "y": 160, "Chennai": 630, "Bangalore": 570, "Vijayawada": 270 },
    "Coimbatore": { "x": 220, "y": 660, "Chennai": 500, "Madurai": 210 },
    "Mysore": { "x": 130, "y": 520, "Bangalore": 150 },
    "Vijayawada": { "x": 530, "y": 280, "Hyderabad": 270 },
    "Madurai": { "x": 300, "y": 730, "Coimbatore": 210, "Salem": 230 },
    "Visakhapatnam": { "x": 625, "y": 238, "Tirupati": 760 },
    "Salem": { "x": 300, "y": 630, "Chennai": 340, "Madurai": 230 },
    "Tirupati": { "x": 365, "y": 460, "Chennai": 135, "Visakhapatnam": 760 }
};
    // Draw links
    const link = svg.append("g")
        .attr("class", "links")
        .selectAll("line")
        .data(filteredLinks)
        .enter().append("line")
        .attr("stroke-width", d => highlightedPath.some(p => (p.source === d.source && p.target === d.target) || (p.source === d.target && p.target === d.source)) ? 3 : 1)
        .attr("stroke", d => highlightedPath.some(p => (p.source === d.source && p.target === d.target) || (p.source === d.target && p.target === d.source)) ? "red" : "#999");

    // Draw nodes
    const node = svg.append("g")
        .attr("class", "nodes")
        .selectAll("circle")
        .data(nodes)
        .enter().append("circle")
        .attr("r", 6)
        .attr("fill", "#007bff");

    // Draw node labels
    const text = svg.append("g")
        .attr("class", "texts")
        .selectAll("text")
        .data(nodes)
        .enter().append("text")
        .attr("dy", -8)
        .attr("text-anchor", "middle")
        .attr("font-size", "10px")
        .attr("fill", "white")
        .text(d => d.id);

    // Position the links, nodes, and labels statically
    link
        .attr("x1", d => positions[d.source].x)
        .attr("y1", d => positions[d.source].y)
        .attr("x2", d => positions[d.target].x)
        .attr("y2", d => positions[d.target].y);

    node
        .attr("cx", d => positions[d.id].x)
        .attr("cy", d => positions[d.id].y);

    text
        .attr("x", d => positions[d.id].x)
        .attr("y", d => positions[d.id].y);
}














<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Graph View</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="graph.js"></script>
    <script src="path_finder.js"></script>
    <style>
        /* Inbuilt CSS for styling the graph container */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: space-between; /* Space out containers */
            align-items: center;
            height: 100vh;
            background-color: #d1d1d1;
        }
        .container {
            width: 50%; /* Adjust width as needed */
            height: 120%; /* Adjust height as needed */
            margin-left: 2%; /* Add margin to shift container to the left */
            padding: 20px;
            border: 1px solid #ccc;
            background-image: url('/bg.jpg'); /* Ensure this path is correct */
            background-size: cover; /* Ensures the image covers the entire container */
            background-position: center; /* Centers the image */
            background-repeat: no-repeat; /* Prevents repeating the image */
            background-color: #fff; /* Optional: fallback color */
        }
        .container-2 {
            width: 30%; /* Adjust width as needed */
            height: 90%; /* Adjust height as needed */
            background-color: #f0f0f0; /* Optional: background color for the second container */
            border: 1px solid #ccc;
        }
        #graph {
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div class="container">
        <div id="graph"></div>
        <script>
            // Retrieve URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const source = urlParams.get('source');
            const destination = urlParams.get('destination');

            // Find the shortest path
            const path = dijkstra(source, destination);
            const highlightedPath = [];

            // Create the path segments for highlighting
            for (let i = 0; i < path.length - 1; i++) {
                highlightedPath.push({
                    source: path[i],
                    target: path[i + 1]
                });
            }

            // Create the graph with the cities data and the highlighted path
            createGraph(cities, highlightedPath);
        </script>
    </div>
    <div class="container-2"></div>
</body>
</html>
